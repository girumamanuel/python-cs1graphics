 ex.3.1 

from cs1graphics import *
paper = Canvas( )
paper.setBackgroundColor('blue black')
paper.setWidth(400)
paper.setTitle('Little angel')

ex.3.2

one = Rectangle(12, 28, Point(154,85))
one.setFillColor('blue')
paper.add(one)

ex.3.3

we have no further way to interact with the canvas 
because we did not assign an identifier to the newly created object.

paper = Canvas()

ex.3.4

passing parameters like this sq.setFillColor('red')

not leave like this sq.setFillColor(red)


ex.3.5

calling several methods supported by the Circle class

The Circle constructor accepts up to two additional parameters. 
The first parameter specifies theinitial radius. Thus a call to Circle(50) could be used to create a circle with radius 30,although still centered at the origin with a black border and transparent interior. 

A secondoptional parameter can be used to choose a different initial center position.

sq = Square( )
sq.setSize(40)
sq.moveTo(50,50)
sq.setFillColor( 'Red' )
can.add(sq)

cir = Circle( )
cir.moveTo(50,50)
cir.setRadius(15)
cir.setFillColor( 'Blue' )
can.add(cir)

ex.3.6

one = Rectangle(15, 28, Point(155,85)),(16, 28, Point(155,85))
one.setFillColor('red','yellow')
paper.add(one)

ex.3.7 

The following runs but does not display anything. What is wrong?

can = Canvas( )
lay = Layer( )
sq = Square( )
lay.add(sq)

we should  not pass the object that created before and  if we pass the parameter it should display 

A layer is somewhat similar to a canvas in that it has its own relative coordinate system. Shapes can be added to the layer, in which case the shape’s reference point determines the placement of that shape relative to the layer’s coordinate system (i.e., the shape is tacked to a position on the layer). We use the origin of the layer as a landmark when placing individual elements.


ex.3.8

tree = Polygon(Point(50,80), Point(30,140), Point(70,140))
tree.setFillColor( 'darkGreen' )
paper.add(tree)


ex.3.9

from cs1graphics import *
paper = Canvas( )
head = Circle(75, Point(100,100))
head.setFillColor( 'yellow' )
head.setDepth(60)
paper.add(head)
mouth = Circle(40, Point(100,110))
mouth.setFillColor( 'black' )
mouth.setBorderWidth(0)
mouth.setDepth(52)
paper.add(mouth)
mouthCover = Circle(40, Point(100,100))
mouthCover.setFillColor( 'yellow' )
mouthCover.setBorderWidth(0)
mouthCover.setDepth(51)
paper.add(mouthCover)
nose = Polygon(Point(100,90), Point(92,110), Point(108,110))
nose.setFillColor( 'black' )
paper.add(nose)
leftEye = Circle(10, Point(70,80))
leftEye.setFillColor( 'black' )
rightEye = Circle(10, Point(130,80))
rightEye.setFillColor( 'black' )
paper.add(leftEye)
paper.add(rightEye)
leftEyebrow = Path(Point(60,65), Point(70,60), Point(80,65))
leftEyebrow.setBorderWidth(3)
leftEyebrow.adjustReference(10,15)
# set to center of left eyeball
leftEyebrow.rotate( − 15)
paper.add(leftEyebrow)
rightEyebrow = leftEyebrow.clone( )
rightEyebrow.flip( )
rightEyebrow.move(60,0)
paper.add(rightEyebrow)

ex.3.13

from cs1graphics import *

# Let's create the Tkinter window.

window = tkinter.Tk()
window.title("GUI")

top_frame = Techdemy.Frame(window).pack()
bottom_frame = Techdemy.Frame(window).pack(side = "bottom")
btn1 = Techdemy.Button(top_frame, text = "Click me", fg = "dark").pack()

or 

from cs1graphics import *
import tkinter
# Let's create the Tkinter window
window = tkinter.Tk()
window.title("GUI")

# creating a function called Techdemu_Tutorial()
def DataCamp_Tutorial():
  tkinter.Label(window, text = "Learn GUI With TECHDEMY TASK!").pack()

tkinter.Button(window, text = "Click Me!", command = Techdemy_Tutorial).pack()
window.mainloop()


ex.3.15

self.canvas = Canvas(root, width=800, height=650, bg = '#afeeee')
self.canvas.create_text(100,10,fill="darkblue",font="Times 20 italic bold",
                        text="Click the bubbles that are multiples of two.")



project
ex.3.17


from cs1graphics import *
import turtle
import time

wndw = turtle.Screen()
wndw.bgcolor("black")
wndw.setup(width=600, height=600)
wndw.title("Analogue Clock")
wndw.tracer(0)

# Create the drawing pen
pen = turtle.Turtle()
pen.hideturtle()
pen.speed(0)
pen.pensize(3)


def draw_clock(hr, mn, sec, pen):

    # Draw clock face
    pen.up()
    pen.goto(0, 210)
    pen.setheading(180)
    pen.color("green")
    pen.pendown()
    pen.circle(210)

    # Draw hour hashes
    pen.up()
    pen.goto(0, 0)
    pen.setheading(90)

    for _ in range(12):
        pen.fd(190)
        pen.pendown()
        pen.fd(20)
        pen.penup()
        pen.goto(0, 0)
        pen.rt(30)

    # Draw the hands
    # Each tuple in list hands describes the color, the length
    # and the divisor for the angle
    hands = [("white", 80, 12), ("blue", 150, 60), ("red", 110, 60)]
    time_set = (hr, mn, sec)

    for hand in hands:
        time_part = time_set[hands.index(hand)]
        angle = (time_part/hand[2])*360
        pen.penup()
        pen.goto(0, 0)
        pen.color(hand[0])
        pen.setheading(90)
        pen.rt(angle)
        pen.pendown()
        pen.fd(hand[1])


while True:
    hr = int(time.strftime("%I"))
    mn = int(time.strftime("%M"))
    sec = int(time.strftime("%S"))

    draw_clock(hr, mn, sec, pen)
    wndw.update()
    time.sleep(1)
    pen.clear()

wndw.mainloop()


ex.3.15

from turtle import *
import turtle

scr = turtle.Screen()
 
scr.setup(500, 500)

clock = turtle.Turtle()
 
clock.color('cyan')
 
clock.width(5)
 
 
def drawhourhand():
    clock.penup()
    clock.home()
    clock.right(90)
    clock.pendown()
    clock.forward(100)
 

val = 0
 
for i in range(12):
   
    val += 1
 
    clock.penup()
 
     clock.setheading(-30 * (i + 3) + 75)
 
    clock.forward(22)

    clock.pendown()
 
    clock.forward(15)
 
    clock.penup()
 
    clock.forward(20)
 
    clock.write(str(val), align="center", font=("Arial",12, "normal"))
clock.setpos(2, -112)
clock.pendown()
clock.width(2)

clock.fillcolor('Green')
 
clock.begin_fill()
 
clock.circle(7)
 
clock.end_fill()
 
clock.penup()
drawhourhand()
clock.setpos(-18, -62)
clock.pendown()
clock.penup()
 
clock.setpos(-28, -150)
clock.pendown()
clock.write('Python Guides', font=("Arial",14,
                              "normal"))
clock.hideturtle()
turtle.done()


